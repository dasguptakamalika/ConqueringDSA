class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            } 
            
            map.put(nums[i], i);
        }
        
        // According to the problem, a solution always exists
        return new int[] {};
    }
}

// total time complexity is O(n), where n is the length of nums.
//space complexity is O(n) for the hash map.
